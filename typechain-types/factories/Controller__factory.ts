/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Controller,
  ControllerInterface,
  ConstructorParamsStruct,
} from "../Controller";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "percentage",
                type: "uint8",
              },
              {
                internalType: "uint16",
                name: "amount",
                type: "uint16",
              },
              {
                internalType: "string",
                name: "feeType",
                type: "string",
              },
              {
                internalType: "bool",
                name: "cumulative",
                type: "bool",
              },
              {
                internalType: "string[]",
                name: "noCombine",
                type: "string[]",
              },
            ],
            internalType: "struct Fee",
            name: "askFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "percentage",
                type: "uint8",
              },
              {
                internalType: "uint16",
                name: "amount",
                type: "uint16",
              },
              {
                internalType: "string",
                name: "feeType",
                type: "string",
              },
              {
                internalType: "bool",
                name: "cumulative",
                type: "bool",
              },
              {
                internalType: "string[]",
                name: "noCombine",
                type: "string[]",
              },
            ],
            internalType: "struct Fee",
            name: "bidFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "percentage",
                type: "uint8",
              },
              {
                internalType: "uint16",
                name: "amount",
                type: "uint16",
              },
              {
                internalType: "string",
                name: "feeType",
                type: "string",
              },
              {
                internalType: "bool",
                name: "cumulative",
                type: "bool",
              },
              {
                internalType: "string[]",
                name: "noCombine",
                type: "string[]",
              },
            ],
            internalType: "struct Fee",
            name: "marginFee",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "numberOfPeriodsPerDay",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "periodDurationInMinutes",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "periodsStartHour",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "periodsStartMinute",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "treasuryWallet",
            type: "address",
          },
          {
            internalType: "address",
            name: "escrowWallet",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "string",
                name: "measurementUnit",
                type: "string",
              },
            ],
            internalType: "struct Resource[]",
            name: "resources",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "sellers",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "buyers",
            type: "address[]",
          },
        ],
        internalType: "struct ConstructorParams",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "addBuyer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "addSeller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "askFee",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "percentage",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "amount",
        type: "uint16",
      },
      {
        internalType: "string",
        name: "feeType",
        type: "string",
      },
      {
        internalType: "bool",
        name: "cumulative",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bidFee",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "percentage",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "amount",
        type: "uint16",
      },
      {
        internalType: "string",
        name: "feeType",
        type: "string",
      },
      {
        internalType: "bool",
        name: "cumulative",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "marginFee",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "percentage",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "amount",
        type: "uint16",
      },
      {
        internalType: "string",
        name: "feeType",
        type: "string",
      },
      {
        internalType: "bool",
        name: "cumulative",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numberOfPeriodsPerDay",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodDurationInMinutes",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodsStartHour",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodsStartMinute",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "removeBuyer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "removeSeller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newEscrow",
        type: "address",
      },
    ],
    name: "setEscrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newTreasury",
        type: "address",
      },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001c6538038062001c65833981016040819052620000349162000b35565b6200007f6040518060400160405280601481526020017f4465706c6f79696e6720436f6e74726f6c6c65720000000000000000000000008152506200049c60201b62000c8b1760201c565b80518051600090815560208083015160018054604086015161ffff166101000262ffffff1990911660ff9093169290921791909117905560608301518051620000cd9260029201906200050b565b50608082015160038201805460ff191691151591909117905560a08201518051620001039160048401916020909101906200059a565b505050602080820151805160059081558183015160068054604085015161ffff166101000262ffffff1990911660ff9093169290921791909117905560608201518051929391926200015a9260079201906200050b565b50608082015160038201805460ff191691151591909117905560a08201518051620001909160048401916020909101906200059a565b5050506040808201518051600a908155602080830151600b80549585015161ffff166101000262ffffff1990961660ff90921691909117949094179093556060820151805192939192620001e992600c9201906200050b565b50608082015160038201805460ff191691151591909117905560a082015180516200021f9160048401916020909101906200059a565b5050506060810151600f8054608084015160a085015160c086015160e087015160ff96871661ffff199095169490941761010093871684021763ffff00001916620100009287169290920263ff0000001916919091176301000000959091169490940293909317600160201b600160c01b0319166401000000006001600160a01b03928316021790915590820151601080546001600160a01b0319169190921617905560005b816101600151518110156200033b576001601660008461016001518481518110620002f457620002f462000ce8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003328162000cfe565b915050620002c5565b5060005b81610140015151811015620003b55760016015600084610140015184815181106200036e576200036e62000ce8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620003ac8162000cfe565b9150506200033f565b5060005b8161012001515181101562000482578161012001518181518110620003e257620003e262000ce8565b60200260200101516011826001811062000400576200040062000ce8565b600402016000820151816000015560208201518160010190805190602001906200042c9291906200050b565b50604082015180516200044a9160028401916020909101906200050b565b5060608201518051620004689160038401916020909101906200050b565b509050508080620004799062000cfe565b915050620003b9565b5050601780546001600160a01b0319163317905562000d9a565b620004e781604051602401620004b3919062000d28565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b17909152620004ea16565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054620005199062000d5d565b90600052602060002090601f0160209004810192826200053d576000855562000588565b82601f106200055857805160ff191683800117855562000588565b8280016001018555821562000588579182015b82811115620005885782518255916020019190600101906200056b565b5062000596929150620005fa565b5090565b828054828255906000526020600020908101928215620005ec579160200282015b82811115620005ec5782518051620005db9184916020909101906200050b565b5091602001919060010190620005bb565b506200059692915062000611565b5b80821115620005965760008155600101620005fb565b808211156200059657600062000628828262000632565b5060010162000611565b508054620006409062000d5d565b6000825580601f1062000651575050565b601f016020900490600052602060002090810190620004e79190620005fa565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715620006ac57620006ac62000671565b60405290565b604051608081016001600160401b0381118282101715620006ac57620006ac62000671565b60405161018081016001600160401b0381118282101715620006ac57620006ac62000671565b604051601f8201601f191681016001600160401b038111828210171562000728576200072862000671565b604052919050565b805160ff811681146200074257600080fd5b919050565b805161ffff811681146200074257600080fd5b60005b83811015620007775781810151838201526020016200075d565b8381111562000787576000848401525b50505050565b600082601f8301126200079f57600080fd5b81516001600160401b03811115620007bb57620007bb62000671565b620007d0601f8201601f1916602001620006fd565b818152846020838601011115620007e657600080fd5b620007f98260208301602087016200075a565b949350505050565b805180151581146200074257600080fd5b60006001600160401b038211156200082e576200082e62000671565b5060051b60200190565b600082601f8301126200084a57600080fd5b81516020620008636200085d8362000812565b620006fd565b82815260059290921b840181019181810190868411156200088357600080fd5b8286015b84811015620008c75780516001600160401b03811115620008a85760008081fd5b620008b88986838b01016200078d565b84525091830191830162000887565b509695505050505050565b600060c08284031215620008e557600080fd5b620008ef62000687565b905081518152620009036020830162000730565b6020820152620009166040830162000747565b604082015260608201516001600160401b03808211156200093657600080fd5b62000944858386016200078d565b6060840152620009576080850162000801565b608084015260a08401519150808211156200097157600080fd5b50620009808482850162000838565b60a08301525092915050565b80516001600160a01b03811681146200074257600080fd5b600082601f830112620009b657600080fd5b81516020620009c96200085d8362000812565b82815260059290921b84018101918181019086841115620009e957600080fd5b8286015b84811015620008c75780516001600160401b038082111562000a0f5760008081fd5b908801906080828b03601f190181131562000a2a5760008081fd5b62000a34620006b2565b8784015181526040808501518481111562000a4f5760008081fd5b62000a5f8e8b838901016200078d565b8a840152506060808601518581111562000a795760008081fd5b62000a898f8c838a01016200078d565b848401525092850151928484111562000aa457600091508182fd5b62000ab48e8b868901016200078d565b90830152508652505050918301918301620009ed565b600082601f83011262000adc57600080fd5b8151602062000aef6200085d8362000812565b82815260059290921b8401810191818101908684111562000b0f57600080fd5b8286015b84811015620008c75762000b27816200098c565b835291830191830162000b13565b60006020828403121562000b4857600080fd5b81516001600160401b038082111562000b6057600080fd5b90830190610180828603121562000b7657600080fd5b62000b80620006d7565b82518281111562000b9057600080fd5b62000b9e87828601620008d2565b82525060208301518281111562000bb457600080fd5b62000bc287828601620008d2565b60208301525060408301518281111562000bdb57600080fd5b62000be987828601620008d2565b60408301525062000bfd6060840162000730565b606082015262000c106080840162000730565b608082015262000c2360a0840162000730565b60a082015262000c3660c0840162000730565b60c082015262000c4960e084016200098c565b60e082015261010062000c5e8185016200098c565b90820152610120838101518381111562000c7757600080fd5b62000c8588828701620009a4565b828401525050610140808401518381111562000ca057600080fd5b62000cae8882870162000aca565b828401525050610160808401518381111562000cc957600080fd5b62000cd78882870162000aca565b918301919091525095945050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000d2157634e487b7160e01b600052601160045260246000fd5b5060010190565b602081526000825180602084015262000d498160408501602087016200075a565b601f01601f19169190910160400192915050565b600181811c9082168062000d7257607f821691505b6020821081141562000d9457634e487b7160e01b600052602260045260246000fd5b50919050565b610ebb8062000daa6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063b67df1c311610097578063e03ff71411610066578063e03ff714146101d8578063e14a2115146101ec578063f0f44260146101f4578063f8a8fd6d1461020757600080fd5b8063b67df1c314610197578063bbf898031461019f578063c10c3546146101b2578063d93fabfa146101c557600080fd5b80633dbae55b116100d35780633dbae55b1461014b578063637e2406146101645780636f75b00c146101715780637cb9cf541461018457600080fd5b80630547be29146100fa57806313af4035146101235780631842476b14610138575b600080fd5b600f5461010c90610100900460ff1681565b60405160ff90911681526020015b60405180910390f35b610136610131366004610d36565b61021c565b005b600f5461010c9062010000900460ff1681565b6101536102e9565b60405161011a959493929190610dde565b600f5461010c9060ff1681565b61013661017f366004610d36565b61039e565b610136610192366004610d36565b610534565b610153610665565b6101366101ad366004610d36565b61068e565b6101366101c0366004610d36565b610822565b6101366101d3366004610d36565b6108ea565b600f5461010c906301000000900460ff1681565b610153610a7e565b610136610202366004610d36565b610aa7565b61020f610b77565b60405161011a9190610e1e565b60175473ffffffffffffffffffffffffffffffffffffffff1633146102a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b601780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805460015460028054929360ff83169361010090930461ffff169290919061031290610e31565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90610e31565b801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b5050506003909301549192505060ff1685565b60175473ffffffffffffffffffffffffffffffffffffffff16331461041f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b73ffffffffffffffffffffffffffffffffffffffff811660009081526016602052604090205460ff16801561047e575073ffffffffffffffffffffffffffffffffffffffff811660009081526016602052604090205460ff1615156001145b156104cf5773ffffffffffffffffffffffffffffffffffffffff16600090815260166020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f427579657220616c72656164792064697361626c6564206f7220616273656e746044820152606401610299565b50565b60175473ffffffffffffffffffffffffffffffffffffffff1633146105b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b73ffffffffffffffffffffffffffffffffffffffff811660009081526015602052604090205460ff168015610614575073ffffffffffffffffffffffffffffffffffffffff811660009081526015602052604090205460ff1615156001145b156104cf5773ffffffffffffffffffffffffffffffffffffffff16600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600a8054600b54600c8054929360ff83169361010090930461ffff169290919061031290610e31565b60175473ffffffffffffffffffffffffffffffffffffffff16331461070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b73ffffffffffffffffffffffffffffffffffffffff811660009081526016602052604090205460ff16158061076a575073ffffffffffffffffffffffffffffffffffffffff811660009081526016602052604090205460ff16155b156107c05773ffffffffffffffffffffffffffffffffffffffff8116600090815260166020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f427579657220616c726561647920616c6c6f77656400000000000000000000006044820152606401610299565b60175473ffffffffffffffffffffffffffffffffffffffff1633146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60175473ffffffffffffffffffffffffffffffffffffffff16331461096b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b73ffffffffffffffffffffffffffffffffffffffff811660009081526015602052604090205460ff1615806109c6575073ffffffffffffffffffffffffffffffffffffffff811660009081526015602052604090205460ff16155b15610a1c5773ffffffffffffffffffffffffffffffffffffffff8116600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53656c6c657220616c726561647920616c6c6f776564000000000000000000006044820152606401610299565b6005805460065460078054929360ff83169361010090930461ffff169290919061031290610e31565b60175473ffffffffffffffffffffffffffffffffffffffff163314610b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b600f805473ffffffffffffffffffffffffffffffffffffffff909216640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff909216919091179055565b60175460609073ffffffffffffffffffffffffffffffffffffffff163314610bfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b60128054610c0890610e31565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3490610e31565b8015610c815780601f10610c5657610100808354040283529160200191610c81565b820191906000526020600020905b815481529060010190602001808311610c6457829003601f168201915b5050505050905090565b61053181604051602401610c9f9190610e1e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac0000000000000000000000000000000000000000000000000000000017905280516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208284031215610d4857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d6c57600080fd5b9392505050565b6000815180845260005b81811015610d9957602081850181015186830182015201610d7d565b81811115610dab576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b85815260ff8516602082015261ffff8416604082015260a060608201526000610e0a60a0830185610d73565b905082151560808301529695505050505050565b602081526000610d6c6020830184610d73565b600181811c90821680610e4557607f821691505b60208210811415610e7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220378f233fb9fa72bfb619037bd47e7bebb97ce9d5540adc4dbaa513599746d5fe64736f6c63430008090033";

type ControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Controller__factory extends ContractFactory {
  constructor(...args: ControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: ConstructorParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Controller> {
    return super.deploy(params, overrides || {}) as Promise<Controller>;
  }
  override getDeployTransaction(
    params: ConstructorParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): Controller {
    return super.attach(address) as Controller;
  }
  override connect(signer: Signer): Controller__factory {
    return super.connect(signer) as Controller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerInterface {
    return new utils.Interface(_abi) as ControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Controller {
    return new Contract(address, _abi, signerOrProvider) as Controller;
  }
}
